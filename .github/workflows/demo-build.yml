on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        version: [3.11, 3.12, 3.13]

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.version }}

      - name: List files
        run: ls -l

      - name: Run hello.py and save output
        run: |
          python hello.py > output-${{ matrix.version }}.txt

      - name: Upload hello.py output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: hello-output-${{ matrix.version }}
          path: output-${{ matrix.version }}.txt


# on: [push]
# jobs:
#   build:

#     runs-on: ubuntu-latest
#     steps:

#     - name: Checkout repository
#       uses: actions/checkout@v4

#     - name: list files
#       run: |
#         ls -l


#     - name: Run hello.py and save output
#       run:
#           python hello.py > output.txt


#     - name: uplod hello.py output as artifact
#       uses: actions/upload-artifact@v4
#       with:
#         name: hello-output
#         path: output.txt

  # another-build:
  #   runs-on: ubuntu-latest
  #   steps:

  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: list files
  #     run: |
  #       ls -l





# pipeline {
#     agent {label 'slave'}

#     stages {
#         stage('Git Checkout') {
#             steps {
#                 checkout scmGit(
#                     branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/prathamesh633/student-ui-app.git']]
#                 )
#             }
#         }

#         stage('Build Docker Image') {
#             steps {
#                 sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
#             }
#         }

#         stage('Docker Push') {
#             steps {
#                 withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
#                     sh '''
#                         echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
#                         docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
#                     '''
#                 }
#             }
#         }

#         stage('Run Docker Container') {
#             steps {
#                 sh 'docker run -d -p 8082:8080 ${DOCKER_IMAGE}:${DOCKER_TAG}'
#             }
#         }

#         stage('Docker Cleanup') {
#             steps {
#                 sh 'docker system prune -a -f'
#             }
#         }
#     }
# }
